import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:kakao_flutter_sdk/kakao_flutter_sdk.dart';
import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import '../models/user.dart' as app_user;
import 'user_service.dart';
import 'auth_service.dart';

class KakaoAuthService {
  // 카카오 로그인 (카카오톡 앱 우선, 실패시 브라우저)
  static Future<app_user.User?> signInWithKakao() async {
    try {
      print('🚀 카카오 로그인 시도 시작');
      
      // 1. 카카오톡 설치 여부 확인
      bool isKakaoTalkAvailable = await isKakaoTalkInstalled();
      print('📱 카카오톡 설치 여부: $isKakaoTalkAvailable');
      
      // 2. 카카오톡 앱으로 로그인 시도 (설치된 경우)
      if (isKakaoTalkAvailable) {
        print('🔄 카카오톡 앱 로그인 시도 중...');
        try {
          await UserApi.instance.loginWithKakaoTalk();
          print('✅ 카카오톡 앱 로그인 성공');
        } catch (error) {
          print('❌ 카카오톡 앱 로그인 실패: $error');
          print('   에러 타입: ${error.runtimeType}');
          if (error is PlatformException) {
            print('   에러 코드: ${error.code}');
            print('   에러 메시지: ${error.message}');
          }
          
          if (error is PlatformException && error.code == 'CANCELED') {
            print('👤 사용자가 로그인을 취소함');
            return null; // 사용자가 로그인을 취소한 경우
          }
          
          // 카카오톡 앱 로그인 실패시 브라우저로 시도
          print('🔄 브라우저 로그인으로 fallback 시도...');
          await _loginWithKakaoAccount();
        }
      } else {
        // 카카오톡 앱이 설치되지 않은 경우 브라우저로 로그인
        print('🌐 카카오톡 미설치로 브라우저 로그인 시도...');
        await _loginWithKakaoAccount();
      }

      // 3. 카카오 사용자 정보 가져오기
      print('🔍 카카오 사용자 정보 가져오는 중...');
      User kakaoUser = await UserApi.instance.me();
      
      print('✅ 카카오 사용자 정보 획득 성공');
      print('📋 카카오 사용자 상세 정보:');
      print('  - ID: ${kakaoUser.id}');
      print('  - 닉네임: ${kakaoUser.kakaoAccount?.profile?.nickname}');
      print('  - 프로필 사진: ${kakaoUser.kakaoAccount?.profile?.profileImageUrl}');
      print('  - 이메일: ${kakaoUser.kakaoAccount?.email}');
      print('  - 전체 프로필 정보: ${kakaoUser.kakaoAccount?.profile}');

      // 4. Firebase 연동 시작
      print('🔥 Firebase 사용자 연동 시작...');
      return await _createOrGetFirebaseUser(kakaoUser);
      
    } catch (error) {
      print('❌ 카카오 로그인 에러: $error');
      rethrow;
    }
  }

  // 카카오 계정으로 로그인
  static Future<void> _loginWithKakaoAccount() async {
    try {
      if (kDebugMode) {
        print('🌐 카카오 계정 브라우저 로그인 시작...');
      }
      await UserApi.instance.loginWithKakaoAccount();
      if (kDebugMode) {
        print('✅ 카카오 계정 브라우저 로그인 성공');
      }
    } catch (error) {
      if (kDebugMode) {
        print('❌ 카카오 계정 브라우저 로그인 실패: $error');
        print('   에러 타입: ${error.runtimeType}');
        if (error is PlatformException) {
          print('   에러 코드: ${error.code}');
          print('   에러 메시지: ${error.message}');
          print('   에러 상세: ${error.details}');
        }
      }
      // 사용자 취소 시에만 null 반환
      if (error is PlatformException && error.code == 'CANCELED') {
        if (kDebugMode) {
          print('👤 사용자가 브라우저 로그인을 취소함');
        }
        rethrow; // 취소는 상위로 전달
      }
      // 다른 에러는 로그만 찍고 계속 진행하지 않음
      if (kDebugMode) {
        print('🚫 브라우저 로그인 실패 - 에러를 상위로 전달');
      }
      rethrow;
    }
  }

  // Firebase 익명 인증으로 카카오 사용자 연동
  static Future<app_user.User?> _createOrGetFirebaseUser(User kakaoUser) async {
    try {
      final kakaoId = kakaoUser.id.toString();
      final email = kakaoUser.kakaoAccount?.email ?? '$kakaoId@kakao.com';
      final name = kakaoUser.kakaoAccount?.profile?.nickname ?? '카카오사용자';
      final profileImage = kakaoUser.kakaoAccount?.profile?.profileImageUrl;

      if (kDebugMode) {
        print('🔥 Firebase 익명 인증 시작...');
      }

      // Firebase 익명 인증
      final credential = await firebase_auth.FirebaseAuth.instance.signInAnonymously();
      final firebaseUser = credential.user;

      if (firebaseUser != null) {
        if (kDebugMode) {
          print('✅ Firebase 익명 인증 성공: ${firebaseUser.uid}');
        }

        if (kDebugMode) {
          print('🔍 Firestore에서 기존 사용자 확인 중...');
        }

        // Firestore에서 카카오 ID로 기존 사용자 찾기
        if (kDebugMode) {
          print('🔍 카카오 ID로 기존 사용자 검색 중: $kakaoId');
        }
        app_user.User? existingUser = await UserService.getUserByKakaoId(kakaoId);
        if (kDebugMode) {
          print('🔍 기존 사용자 검색 결과: ${existingUser != null ? "발견됨 (${existingUser.name})" : "없음"}');
        }
        
        if (existingUser == null) {
          // 신규 사용자 - 특별한 표시자와 함께 반환
          if (kDebugMode) {
            print('🆕 신규 사용자 감지 - 닉네임 입력 화면으로 이동해야 함');
            print('  - 카카오 ID: $kakaoId');
            print('  - Firebase UID: ${firebaseUser.uid}');
            print('  - 카카오 닉네임: $name');
            print('  - 이메일: $email');
            print('  - 프로필 이미지: $profileImage');
          }
          
          // 신규 사용자임을 명확히 표시 (name을 "NEW_USER"로 설정)
          return app_user.User(
            id: firebaseUser.uid,
            name: 'NEW_USER', // 신규 사용자 표시자
            email: email,
            profileImageUrl: profileImage,
            kakaoId: kakaoId,
          );
        } else {
          // 기존 사용자 - Firebase UID 업데이트 후 반환
          if (kDebugMode) {
            print('✅ 기존 사용자 발견: ${existingUser.name}');
            print('  - 기존 Firebase UID: ${existingUser.id}');
            print('  - 새 Firebase UID: ${firebaseUser.uid}');
          }

          // 기존 사용자 문서 삭제 (이전 UID)
          if (kDebugMode) {
            print('🗑️ 기존 사용자 문서 삭제 중: ${existingUser.id}');
          }
          await UserService.deleteUser(existingUser.id);
          
          // 새로운 UID로 사용자 문서 생성
          final updatedUser = existingUser.copyWith(
            id: firebaseUser.uid,
            profileImageUrl: profileImage,
            updatedAt: DateTime.now(),
          );
          
          if (kDebugMode) {
            print('📝 새로운 UID로 사용자 문서 생성: ${firebaseUser.uid}');
          }
          await UserService.createUser(updatedUser);
          
          if (kDebugMode) {
            print('✅ 기존 사용자 정보 마이그레이션 완료');
          }
          return updatedUser;
        }
      }
      
      return null;
    } catch (e) {
      if (kDebugMode) {
        print('❌ Firebase 사용자 생성/가져오기 실패: $e');
      }
      rethrow;
    }
  }

  // 카카오 로그아웃
  static Future<void> signOut() async {
    try {
      await UserApi.instance.logout();
      await AuthService.signOut();
      
      if (kDebugMode) {
        print('✅ 카카오 로그아웃 성공');
      }
    } catch (error) {
      if (kDebugMode) {
        print('❌ 카카오 로그아웃 실패: $error');
      }
      rethrow;
    }
  }

  // 카카오 연결 끊기 (회원 탈퇴)
  static Future<void> unlink() async {
    String? lastError;
    
    try {
      if (kDebugMode) {
        print('🔄 회원탈퇴 프로세스 시작');
      }
      
      // 1. 카카오 연결 끊기 (실패해도 계속 진행)
      try {
        if (kDebugMode) {
          print('🔄 카카오 연결 끊기 시도...');
        }
        await UserApi.instance.unlink();
        if (kDebugMode) {
          print('✅ 카카오 연결 끊기 성공');
        }
      } catch (kakaoError) {
        lastError = kakaoError.toString();
        if (kDebugMode) {
          print('⚠️ 카카오 연결 끊기 실패 (계속 진행): $kakaoError');
        }
      }
      
      // 2. Firebase 계정 삭제 (반드시 실행)
      try {
        if (kDebugMode) {
          print('🔄 Firebase 계정 삭제 시도...');
        }
        await AuthService.deleteAccount();
        if (kDebugMode) {
          print('✅ Firebase 계정 삭제 성공');
        }
      } catch (firebaseError) {
        if (kDebugMode) {
          print('❌ Firebase 계정 삭제 실패: $firebaseError');
        }
        throw firebaseError; // Firebase 삭제는 반드시 성공해야 함
      }
      
      if (kDebugMode) {
        if (lastError != null) {
          print('⚠️ 회원탈퇴 완료 (카카오 연결 끊기 실패했지만 Firebase 계정은 삭제됨)');
        } else {
          print('✅ 회원탈퇴 완전 성공');
        }
      }
      
    } catch (error) {
      if (kDebugMode) {
        print('❌ 회원탈퇴 실패: $error');
      }
      rethrow;
    }
  }
}